import itertools as it


def generate_config_str(**kwargs):
    return '_'.join(["%s=%s" % kv for kv in kwargs.items()])

# Dantzig Benchmarks
# ==============================================================================
dantzig_ns = [200, 500, 1000]
dantzig_ps = [500, 1000, 5000, 10000]
dantzig_rhos_ss = [(0, 0), (0.4, 0), (0.8, 0), (0, 0.4), (0, 0.8), (0, 0.95)]
dantzig_is = list(range(20))
DANTZIG_CONFIGS = [
    generate_config_str(n=n, p=p, rho=rho, s=s, i=i)
    for n, p, (rho, s), i in it.product(
            dantzig_ns, dantzig_ps, dantzig_rhos_ss, dantzig_is)]

rule dantzig_all:
    input:
        expand("dantzig/results/{config_str}.csv", config_str=DANTZIG_CONFIGS)

rule dantzig:
    output:
        "dantzig/results/{config_str}.csv"
    log:
        "dantzig/logs/{config_str}.out"
    shell:
        "julia dantzig.jl {wildcards.config_str}"


# Real-World Benchmarks
# ==============================================================================
REAL_WORLD_DATASETS = ["AmazonLarge", "Boston1M", "CensusLarge"]
rule real_world_all:
    input:
        expand("real-world/{dataset}.csv", dataset=REAL_WORLD_DATASETS)

rule real_world:
    output:
        "real-world/{dataset}.csv"
    log:
        "real-world/{dataset}.out"
    shell:
        "julia real-world.jl {wildcards.dataset}"


# Group Lasso Benchmarks
# ==============================================================================
group_ns = [200, 500, 1000]
group_ps = [500, 1000, 5000, 10000]
group_gs = [20, 50, 100]
group_is = list(range(20))
GROUP_CONFIGS = [
    generate_config_str(n=n, p=p, g=g, i=i)
    for n, p, g, i in it.product(group_ns, group_ps, group_gs, group_is)]

rule group_all:
    input:
        expand("group_dantzig/results/{config_str}.csv",
               config_str=GROUP_CONFIGS)

rule group:
    output:
        "group_dantzig/results/{config_str}.csv"
    log:
        "group_dantzig/logs/{config_str}.out"
    shell:
        "julia group_dantzig.jl {wildcards.config_str}"


# Dantzig TF Benchmarks
# ==============================================================================
tf_ns = [10000, 50000, 100000, 200000, 500000]
tf_knots = [200, 2000, 5000]
tf_is = list(range(20))
TF_CONFIGS = [
    generate_config_str(n=n, p=p, g=g, i=i)
    for n, p, g, i in it.product(tf_ns, tf_knots, tf_is)]

rule tf_all:
    input:
        expand("dantzig_tf/results/{config_str}.csv",
               config_str=TF_CONFIGS)

rule tf:
    output:
        "dantzig_tf/results/{config_str}.csv"
    log:
        "dantzig_tf/logs/{config_str}.out"
    shell:
        "julia dantzig_trend_filtering.jl {wildcards.config_str}"
